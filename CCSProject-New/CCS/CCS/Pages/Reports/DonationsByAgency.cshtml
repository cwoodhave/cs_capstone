@page
@model CCS.Pages.Reports.DonationsByAgencyModel
@{
    ViewData["Title"] = "DonationsByAgency";
    Layout = "~/Pages/Shared/_FormLayout.cshtml";
}

<div id="app">

    <h2 class="text-center p-3"><u>Donation By Agency</u></h2>

    <div class="border border-secondary bg-white rounded card">
        <div class="card-header p-0">
            <button class="text-center btn btn-secondary btn-block" role="button" v-on:click="searchExpanded = !searchExpanded">
                <h4>Search Transaction Line Items <span :class="[searchExpanded ? 'fa-minus-square' : 'fa-plus-square', 'fas']"></span></h4>
            </button>
        </div>
        <div class="card-body" v-show="searchExpanded">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-row">
                    <div class="form-group col">
                        <label asp-for="InOutReport.StartDate" class="control-label"></label>
                        <input type="text" class="form-control d-none" v-model="startDate" required />
                        <datetime input-name="InOutReport.StartDate" v-model="startDate" format="MM-DD-YYYY h:mm a" id="InOutReport_StartDate"
                                  input-class="form-control" type="datetime" lang="en" width="100%" :minute-step="1" :clearable="false"></datetime>
                        <span asp-validation-for="InOutReport.StartDate" class="text-danger"></span>
                    </div>
                    <div class="form-group col">
                        <label asp-for="InOutReport.EndDate" class="control-label"></label>
                        <input type="text" class="form-control d-none" v-model="endDate" required />
                        <datetime input-name="InOutReport.EndDate" v-model="endDate" format="MM-DD-YYYY h:mm a" id="InOutReport_EndDate"
                                  input-class="form-control" type="datetime" lang="en" width="100%" :minute-step="1" :clearable="false"></datetime>
                        <span asp-validation-for="InOutReport.EndDate" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col">
                        <label asp-for="InOutReport.TransactionTypes" class="control-label"></label>
                        <select asp-for="InOutReport.TransactionTypes" asp-items="Html.GetEnumSelectList<TransactionTypeInOut>()" class="form-control d-none" v-model="formTranTypeFixed"></select>
                        <vue-multiselect v-model="formTranType" style="padding: 0;" :multiple="true" :close-on-select="false" track-by="text" label="text" :group-select="true" group-values="groupValues"
                                         group-label="groupLabel" placeholder="Select Transaction Type" :options="transactionList" :searchable="true"></vue-multiselect>
                        <span asp-validation-for="InOutReport.TransactionTypes" class="text-danger"></span>
                    </div>
                    <div class="form-group col">
                        <div class="d-flex">
                            <label asp-for="InOutReport.FoodCategories" class="control-label mr-auto"></label>
                            <div>
                                <button class="btn btn-primary btn-sm border-secondary shadow" v-if="formFoodCat.length" v-on:mousedown.prevent.stop="clearFood()">Clear All Food Categories</button>
                            </div>
                        </div>
                        <select asp-for="InOutReport.FoodCategories" class="form-control d-none" v-model="formFoodCatFixed">
                            @foreach (var category in Model.AllCategories)
                            {
                                <option value="@category.FoodCategoryID">@category.Description</option>
                            }
                        </select>
                        <vue-multiselect v-model="formFoodCat" style="padding: 0;" :multiple="true" :close-on-select="false" track-by="text" label="text" :group-select="true" group-values="groupValues"
                                         group-label="groupLabel" placeholder="Select Food Category" :options="foodCatList" :searchable="true" :hide-selected="true"></vue-multiselect>
                        <span asp-validation-for="InOutReport.FoodCategories" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group">
                    <div class="d-flex">
                        <label asp-for="InOutReport.Agencies" class="control-label mr-auto"></label>
                        <div>
                            <button class="btn btn-primary btn-sm border-secondary shadow" v-if="formAgencies.length" v-on:mousedown.prevent.stop="clearAgencies()">Clear All Agencies</button>
                        </div>
                    </div>
                    <select asp-for="InOutReport.Agencies" class="form-control d-none" v-model="formAgenciesFixed">
                        @foreach (var agency in Model.Agencies)
                        {
                            <option value="@agency.AgencyID">@agency.AgencyName - @agency.Address.StreetAddress1 @agency.Address.CityName, @agency.Address.StateShortName @agency.Address.Zipcode</option>
                        }
                    </select>
                    <vue-multiselect v-model="formAgencies" :multiple="true" :close-on-select="false" track-by="text" label="text" :group-select="true" group-values="groupValues"
                                     group-label="groupLabel" placeholder="Select Agencies" :options="agencyList" :searchable="true" :hide-selected="true"></vue-multiselect>
                    <span asp-validation-for="InOutReport.Agencies" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Search Database" class="btn btn-success shadow border-secondary" />
                </div>
            </form>
        </div>
    </div>

    @if (Model.LineItems != null)
    {
        <div class="border border-secondary mt-2 card">
            <div class="card-header p-0">
                <button class="text-center btn btn-secondary btn-block" role="button" v-on:click="resultsExpanded = !resultsExpanded">
                    <h4>Database Results <span :class="[resultsExpanded ? 'fa-minus-square' : 'fa-plus-square', 'fas']"></span></h4>
                </button>
            </div>

            <div class="card-body" v-show="resultsExpanded">
                @* <div class="form-row"> *@
                @*     <div class="col-lg-3 form-group"> *@
                @*         <br /> *@
                @*         <label for="searchAgency">Refine Search By Agency</label> *@
                @*         <input id="searchAgency" v-model="searchAgency" class="form-control" placeholder="Search Agency" /> *@
                @*     </div> *@
                @*     <div class="col-lg-3 form-group"> *@
                @*         <br /> *@
                @*         <label for="searchCat">Refine Search By Category</label> *@
                @*         <input id="searchCat" v-model="searchCat" class="form-control" placeholder="Search Category" /> *@
                @*     </div> *@
                @*     <div class="col-lg-3 form-group border-left border-secondary"> *@
                @*         <label class="mb-0">Refine Search By Dates:</label><br /> *@
                @*         <label for="startDate">Start Date</label> *@
                @*         <input id="startDate" v-model="startDate" class="form-control" type="date" /> *@
                @*     </div> *@
                @*     <div class="col-lg-3 form-group"> *@
                @*         <br /> *@
                @*         <label for="endDate">End Date</label> *@
                @*         <input id="endDate" v-model="endDate" class="form-control" type="date" /> *@
                @*     </div> *@
                @* </div> *@
                <table class="table table-hover table-sm table-bordered bg-light">
                    <thead>
                        <tr>
                            <th></th>
                            <th v-on:click="sort('agency')" style="cursor: pointer" scope="col" class="text-nowrap">
                                @Html.DisplayNameFor(model => model.LineItems[0].DonationTransaction.Agency.AgencyName)
                                Agency
                                <span :class="getArrowClasses('agency')" aria-hidden="true"></span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <template v-for="(donation, index) in sortedDonations">
                            <tr v-bind:key="index" v-on:click="donation.rowExpanded = !donation.rowExpanded">
                                <td class="text-center"><span :class="[donation.rowExpanded ? 'fa-minus-circle' : 'fa-plus-circle', 'fa', 'text-success']"></span></td>
                                <td>
                                    {{donation.agency}}
                                </td>
                            </tr>
                            <tr>
                                <td colspan="5" v-show="donation.rowExpanded">
                                    <table class="table table-striped table-sm mb-0" :id="'subRow' + index">
                                        <thead>
                                        <th>In/Out</th>
                                        <th>Date</th>
                                        <th>Donation Type</th>
                                        <th>Category</th>
                                        <th>Weight</th>
                                        <th>Cases</th>
                                        <th>Quantity</th>
                                        </thead>
                                        <tbody>
                                            <tr v-for="item in donation.lineItems">
                                                <td>{{item.tType}}</td>
                                                <td>{{item.date.toLocaleDateString()}}</td>
                                                <td>{{item.dType}}</td>
                                                <td>{{item.subcategory}}</td>
                                                <td>{{item.weight}}</td>
                                                <td>{{item.cases}}</td>
                                                <td>{{item.quantity}}</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <button class="btn btn-info shadow border border-secondary m-3 mt-0" v-on:click.prevent="generatePDF(donation)" data-toggle="modal" data-target="#exampleModalLong">Generate Agency Report</button>
                                </td>
                            </tr>
                    </template>
                    </tbody>
                </table>
                <div>
                    <button v-on:click="prevPage" class="btn btn-light border border-secondary shadow">Previous</button>
                    <button v-on:click="nextPage" class="btn btn-light border border-secondary shadow">Next</button>
                    <label>Page {{currentPage}} of {{totalPages}}</label>
                    <label for="pageSize" style="padding-left:10px;margin-left:10px;border-left:solid 1px gray">Items Per Page: </label>
                    <input type="number" id="pageSize" name="pageSize" v-model.lazy="pageSize" style="width:50px;" class="custom-control-inline" />
                </div>

                <hr />
                <div style="margin-top:10px;">
                    <button class="btn btn-info shadow border border-secondary" v-on:click.prevent="generateFullPDF()" data-toggle="modal" data-target="#exampleModalLong">Generate Full Report</button>
                    <button class="btn btn-primary shadow border border-secondary" v-on:click.prevent="JSONToCSVConvertor(donations, 'Report', true)">Download Excel</button>
                </div>
            </div>
        </div>
    }

    <!-- Modal -->
    <div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Donation Receipt</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="text-center col-xs-12" id="report"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}


    <script>

        Vue.component('datetime', DatePicker.default);
        Vue.component('vue-multiselect', window.VueMultiselect.default);

        var app = new Vue({
            el: '#app',
            data: {
                donations: [
                    @if (Model.LineItems != null)
                    {
                        int a = 0;
                        foreach (var item in Model.LineItems)
                        {
                            if (a != item.DonationTransaction.AgencyID)
                            {
                                if (a == 0)
                                {
                                    @: { rowExpanded: false, agency: '@item.DonationTransaction.Agency.AgencyName - @item.DonationTransaction.Agency.Address.StreetAddress1 @item.DonationTransaction.Agency.Address.CityName, @item.DonationTransaction.Agency.Address.StateShortName', lineItems: [
                                }
                                else
                                {
                                    @: ] }, { rowExpanded: false, agency: '@item.DonationTransaction.Agency.AgencyName - @item.DonationTransaction.Agency.Address.StreetAddress1 @item.DonationTransaction.Agency.Address.CityName, @item.DonationTransaction.Agency.Address.StateShortName', lineItems: [
                                }
                                a = item.DonationTransaction.AgencyID;
                            }
                            @: {
                            @:      tType: '@item.DonationTransaction.TransactionType',
                            @:      date: new Date('@item.DonationTransaction.TimeStamp'),
                            @:      dType: '@item.DonationType.Type',
                            @:      subcategory: '@item.FoodCategory.FoodCategoryType - @item.FoodCategory.Description',
                            @:      weight: '@item.Weight',
                            @:      cases: '@(item.Cases == null ? " - " : item.Cases.ToString())',
                            @:      quantity: '@(item.Quantity == null ? " - " : item.Quantity.ToString())'
                            @: },
                        }
                        @: ] }
                    }
                ],
                transactionList: [
                    @{
                        @: { groupLabel: 'All',
                        @: groupValues: [

                        foreach (var transaction in (TransactionTypeInOut[]) Enum.GetValues(typeof(TransactionTypeInOut)))
                        {
                            int id = (int) transaction;
                            @:  { id: '@id', text: '@transaction' },
                        }

                        @: ] }
                    }
                ],
                foodCatList: [

                    @{
                        @: { groupLabel: 'Regular',
                        @: groupValues: [

                        foreach (var cat in Model.Regular)
                        {
                            @:  { id: '@cat.FoodCategoryID', text: 'Regular - @cat.Description' },
                        }

                        @: ] },
                        @: { groupLabel: 'USDA',
                        @: groupValues: [

                        foreach (var cat in Model.USDA)
                        {
                            @:  { id: '@cat.FoodCategoryID', text: 'USDA - @cat.Description' },
                        }

                        @: ] },
                        @: { groupLabel: 'Grocery Rescue',
                        @: groupValues: [

                        foreach (var cat in Model.Grocery)
                        {
                            @:  { id: '@cat.FoodCategoryID', text: 'Grocery - @cat.Description' },
                        }

                        @: ] },
                        @: { groupLabel: 'Pantry Pack',
                        @: groupValues: [

                        @:  { id: '@Model.PantryPack.FoodCategoryID', text: '@Model.PantryPack.Description' },

                        @: ] },
                        @: { groupLabel: 'Internal',
                        @: groupValues: [

                        foreach (var cat in Model.Internal)
                        {
                            @:  { id: '@cat.FoodCategoryID', text: 'Internal - @cat.Description' },
                        }

                        @: ] }
                    }
                ],
                agencyList: [
                    @{
                        @: { groupLabel: 'Donors',
                        @: groupValues: [

                        foreach (var donor in Model.Donors)
                        {
                            @:  { id: '@donor.AgencyID', text: '@donor.AgencyName - @donor.Address.StreetAddress1 @donor.Address.CityName, @donor.Address.StateShortName @donor.Address.Zipcode' },
                        }

                        @: ] },
                        @: { groupLabel: 'Non-Donors',
                        @: groupValues: [

                        foreach (var agency in Model.NonDonors)
                        {
                            @:  { id: '@agency.AgencyID', text: '@agency.AgencyName - @agency.Address.StreetAddress1 @agency.Address.CityName, @agency.Address.StateShortName @agency.Address.Zipcode' },
                        }

                        @: ] }
                    }
                ],
                currentSort: 'date',
                currentSortDir: 'desc',
                pageSize: 10,
                currentPage: 1,
                //searchAgency: '',
                @if (Model.InOutReport == null)
                {
                    @:startDate:  new Date(new Date().setMonth(new Date().getMonth() -1)).setHours(0,0,0,0),
                    @:endDate: new Date().setHours(23, 59, 59, 999),
                }
                else
                {
                    @:startDate:  new Date('@Model.InOutReport.StartDate.ToString()'),
                    @:endDate: new Date('@Model.InOutReport.EndDate.ToString()'),
                }
                //searchCat: '',
                searchExpanded: true,
                resultsExpanded: true,
                formTranType: [
                    @if (Model.InOutReport != null && Model.InOutReport.TransactionTypes != null)
                    {
                        foreach (var transaction in Model.InOutReport.TransactionTypes)
                        {
                            int id = (int) transaction;
                            @:  { id: '@id', text: '@transaction' },
                        }
                    }
                ],
                formFoodCat: [
                    @if (Model.ReturnCategories != null)
                    {
                        foreach (var cat in Model.ReturnCategories)
                        {
                            @:  { id: '@cat.FoodCategoryID', text: '@cat.FoodCategoryType - @cat.Description' },
                        }
                    }
                ],
                formAgencies:
                [
                    @if (Model.ReturnAgencies != null)
                    {
                        foreach (var agency in Model.ReturnAgencies)
                        {
                            @:  { id: '@agency.AgencyID', text: '@agency.AgencyName - @agency.Address.StreetAddress1 @agency.Address.CityName, @agency.Address.StateShortName @agency.Address.Zipcode' },
                        }
                    }
                ],
            },
            watch: {
                pageSize: function() {
                    if (this.pageSize < 1)
                        this.pageSize = 1
                },
                totalPages: function() {
                    if (this.currentPage > this.totalPages)
                        this.currentPage = 1
                }
            },
            methods: {
                getArrowClasses: function(column) {
                    var classes = ['fa']
                    if (column === this.currentSort && this.currentSortDir === 'desc')
                        classes.push('text-primary', 'fa-sort-amount-down')
                    else if (column === this.currentSort && this.currentSortDir === 'asc')
                        classes.push('text-primary', 'fa-sort-amount-up', 'fa-flip-vertical')
                    else
                        classes.push('text-muted', 'fa-sort')
                    return classes

                },
                clearAgencies() {
                    this.formAgencies = []
                },
                clearFood() {
                    this.formFoodCat = []
                },
                sort: function(s) {
                    if (s === this.currentSort) {
                        this.currentSortDir = this.currentSortDir === 'asc' ? 'desc' : 'asc';
                    }
                    this.currentSort = s;
                },
                nextPage: function() {
                    if ((this.currentPage * this.pageSize) < this.donations.length) this.currentPage++;
                },
                prevPage: function() {
                    if (this.currentPage > 1) this.currentPage--;
                },
            generatePDF(donation) {
                var doc = new jsPDF('l', 'mm', 'a4')
                var columns = [
                    { title: "In/Out", dataKey: "tType" },
                    { title: "Date", dataKey: "date" },
                    { title: "Donation Type", dataKey: "dType" },
                    { title: "Category", dataKey: "subcategory" },
                    { title: "Weight", dataKey: "weight" },
                    { title: "Cases", dataKey: "cases" },
                    { title: "Quantity", dataKey: "quantity" }
                ]

                doc.setFontSize(30)
                doc.text('Agency Line Item Report', doc.internal.pageSize.getWidth() / 2, 15, null, null, 'center')
                doc.setFontSize(20)
                doc.text('Agency: ' + donation.agency, 15, 30)
                doc.setFontSize(12)
                doc.autoTable(columns, donation.lineItems,
                    {
                        startY: 35,
                        showHeader: 'firstPage',
                        createdCell: function (cell, data) {
                            if (cell.raw === null) {
                                cell.text = "-"
                            }
                            if (data.column.dataKey === 'date') {
                                cell.text = cell.raw.toLocaleDateString()
                            }
                        }
                    })

                doc.text("Total Rows: " + donation.lineItems.length, 15, doc.autoTable.previous.finalY + 10)

                //doc.save('test.pdf')
                var data = doc.output('datauristring')
                document.getElementById('report').innerHTML =
                    '<iframe style="height:500px;" class="offset-md-1 col-md-10" type="application/pdf" src="' +
                    data +
                    '"></iframe>'

            },
                generateFullPDF() {
                    let doc = new jsPDF('l', 'mm', 'a4')
                    doc.fromHTML('', 20, 20)
                    let columns = [
                        { title: "In/Out", dataKey: "tType" },
                        { title: "Date", dataKey: "date" },
                        { title: "Donation Type", dataKey: "dType" },
                        { title: "Category", dataKey: "subcategory" },
                        { title: "Weight", dataKey: "weight" },
                        { title: "Cases", dataKey: "cases" },
                        { title: "Quantity", dataKey: "quantity" }
                    ]

                    @*let startDate = '@(Model.InOutReport != null && Model.InOutReport.StartDate != null ? Model.InOutReport.StartDate.ToShortDateString() : "")'
                let endDate = '@(Model.InOutReport != null && Model.InOutReport.EndDate != null ? Model.InOutReport.EndDate.AddDays(-1).ToShortDateString() : "")'
                *@
                    doc.setFontSize(30)
                    doc.text('Agency Line Item Report', doc.internal.pageSize.getWidth() / 2, 15, null, null, 'center')
                    //doc.setFontSize(10)
                    //doc.text('Filters: Agencies = "' +  + '" | Food Category = "' + + '" | Between: ' +  + ' and ' +  15, 23)

                    var y_position = 15
                    this.pdfDonations.forEach(function (element) {
                        if (y_position >= 170) {
                            doc.addPage()
                            y_position = 0
                        }
                        doc.setFontSize(14)
                        doc.line(15, y_position + 10, 282, y_position + 10)
                        doc.text(element.agency, 15, y_position + 18)

                        doc.autoTable(columns, element.lineItems,
                            {
                                startY: y_position + 25,
                                showHeader: 'firstPage',
                                createdCell: function (cell, data) {
                                    if (cell.raw === null) {
                                        cell.text = "-"
                                    }
                                    if (data.column.dataKey === 'date') {
                                        cell.text = cell.raw.toLocaleDateString()
                                    }
                                }
                            }
                        )
                        y_position = doc.autoTable.previous.finalY
                    })

                    var data = doc.output('datauristring')
                    document.getElementById('report').innerHTML =
                        '<iframe style="height:500px;" class="offset-md-1 col-md-10" type="application/pdf" src="' +
                        data +
                        '"></iframe>'
                },
                JSONToCSVConvertor: function(JSONData, ReportTitle, ShowLabel) {
                    //If JSONData is not an object then JSON.parse will parse the JSON string in an Object
                    var arrData = typeof JSONData != 'object' ? JSON.parse(JSONData) : JSONData;

                    var CSV = '';
                    //Set Report title in first row or line

                    CSV += ReportTitle + '\r\n\n';

                    //This condition will generate the Label/Header
                    if (ShowLabel) {
                        var row = "";

                        //This loop will extract the label from 1st index of on array
                        for (var index in arrData[0]) {

                            //Now convert each value to string and comma-seprated
                            row += index + ',';
                        }

                        row = row.slice(0, -1);

                        //append Label row with line break
                        CSV += row + '\r\n';
                    }

                    //1st loop is to extract each row
                    for (var i = 0; i < arrData.length; i++) {
                        var row = "";

                        //2nd loop will extract each column and convert it in string comma-seprated
                        for (var index in arrData[i]) {
                            row += '"' + arrData[i][index] + '",';
                        }

                        row.slice(0, row.length - 1);

                        //add a line break after each row
                        CSV += row + '\r\n';
                    }

                    if (CSV == '') {
                        alert("Invalid data");
                        return;
                    }

                    //Generate a file name
                    var fileName = "MyReport_";
                    //this will remove the blank-spaces from the title and replace it with an underscore
                    fileName += ReportTitle.replace(/ /g, "_");

                    //Initialize file format you want csv or xls
                    var uri = 'data:text/csv;charset=utf-8,' + escape(CSV);

                    // Now the little tricky part.
                    // you can use either>> window.open(uri);
                    // but this will not work in some browsers
                    // or you will not get the correct file extension

                    //this trick will generate a temp <a /> tag
                    var link = document.createElement("a");
                    link.href = uri;

                    //set the visibility hidden so it will not effect on your web-layout
                    link.style = "visibility:hidden";
                    link.download = fileName + ".csv";

                    //this part will append the anchor tag and remove it after automatic click
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                },
            },
            computed: {
                totalPages: function() {
                    return Math.ceil(this.donations.length / this.pageSize)
                },
                formTranTypeFixed: function() {
                    return this.formTranType.length === 0 ? [] : this.formTranType.map(m => (m.id))
                },
                formFoodCatFixed: function() {
                    return this.formFoodCat === null ? '' : this.formFoodCat.map(m => (m.id))
                },
                formAgenciesFixed: function() {
                    return this.formTranType.length === 0 ? [] : this.formAgencies.map(m => (m.id))
                },
                sortedDonations: function() {
                    return this.donations.sort((a, b) => {
                        let modifier = 1;
                        if (this.currentSortDir === 'desc') modifier = -1;
                        if (a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
                        if (a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
                        return 0;
                    }).filter((row, index) => {
                        let start = (this.currentPage - 1) * this.pageSize;
                        let end = this.currentPage * this.pageSize;
                        if (index >= start && index < end) return true;
                    });
//                return this.donations.filter(table => {
//                    return table.agency.toLowerCase().includes(this.searchAgency.toLowerCase())
//                }).filter(table => {
//                    return table.category.toLowerCase().includes(this.searchCat.toLowerCase())
//                }).filter(table => {
//                    var endDateFixed = new Date(this.endDate + "GMT-0700")
//                    endDateFixed.setDate(endDateFixed.getDate() + 1);
//
//                    return (table.date.getTime() < endDateFixed.getTime()
//                        && table.date.getTime() >= new Date(this.startDate).getTime())
//                }).sort((a, b) => {
//                    let modifier = 1;
//                    if (this.currentSortDir === 'desc') modifier = -1;
//                    if (a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
//                    if (a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
//                    return 0;
//                }).filter((row, index) => {
//                    let start = (this.currentPage - 1) * this.pageSize;
//                    let end = this.currentPage * this.pageSize;
//                    if (index >= start && index < end) return true;
//                });
                },
                pdfDonations: function() {
                    return this.donations.sort((a, b) => {
                        let modifier = 1;
                        if (this.currentSortDir === 'desc') modifier = -1;
                        if (a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
                        if (a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
                        return 0;
                    });
//                return this.donations.filter(table => {
//                    return table.agency.toLowerCase().includes(this.searchAgency.toLowerCase())
//                }).filter(table => {
//                    return table.category.toLowerCase().includes(this.searchCat.toLowerCase())
//                }).filter(table => {
//                    var endDateFixed = new Date(this.endDate)
//                    endDateFixed.setDate(endDateFixed.getDate() + 1);
//
//                    return (table.date.getTime() < endDateFixed.getTime()
//                        && table.date.getTime() >= new Date(this.startDate).getTime())
//                }).sort((a, b) => {
//                    let modifier = 1;
//                    if (this.currentSortDir === 'desc') modifier = -1;
//                    if (a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
//                    if (a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
//                    return 0;
//                });
                }
            }
        })

    </script>
}

